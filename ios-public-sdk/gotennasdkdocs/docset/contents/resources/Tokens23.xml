<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/GTCommandCenter.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/GTCommandCenter</TokenIdentifier>
			<Abstract type="html">GTCommandCenter is the lifeblood of the goTenna economy, all commands to be sent to the goTenna must go through this class. This is the way in which one is to communicate with a goTenna</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
            
			
			<NodeRef refid="23"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/setOnIncomingMessage:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( GTMessageData *) onIncomingMessage</Declaration>
			
			
			<Anchor>//api/name/onIncomingMessage</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/onIncomingMessage</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( GTMessageData *) onIncomingMessage</Declaration>
			
			
			<Anchor>//api/name/onIncomingMessage</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GTCommandCenter/onIncomingMessage</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( GTMessageData *) onIncomingMessage</Declaration>
			
			
			<Anchor>//api/name/onIncomingMessage</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GTCommandCenter/shared</TokenIdentifier>
			<Abstract type="html">This class is a singleton. Use this method to get the global instance.</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>+ (GTCommandCenter *)shared</Declaration>
			
			<ReturnValue><Abstract type="html">A shared instance</Abstract></ReturnValue>
			<Anchor>//api/name/shared</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/sendEchoCommand:onError:</TokenIdentifier>
			<Abstract type="html">Sends an echo command to the connected goTenna.
Upon receiving an echo the goTenna&apos;s LED will flash.</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)sendEchoCommand:(void ( ^ ) ( GTResponse *))onResponse onError:(void ( ^ ) ( NSError *))onError</Declaration>
			<Parameters>
				<Parameter>
					<Name>onResponse</Name>
					<Abstract type="html">The response listener callback for the command.</Abstract>
				</Parameter><Parameter>
					<Name>onError</Name>
					<Abstract type="html">The error listener callback for the command.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendEchoCommand:onError:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/setgoTennaGID:withUsername:onError:</TokenIdentifier>
			<Abstract type="html">This method is used to set a goTenna&apos;s unique GID. This GID is used for one-to-one messaging.
When this gets set, the previous one-to-one GID for the connected goTenna will be erased and the new
GID set.</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)setgoTennaGID:(NSNumber *)number withUsername:(NSString *)username onError:(void ( ^ ) ( NSError *))onError</Declaration>
			<Parameters>
				<Parameter>
					<Name>number</Name>
					<Abstract type="html">must be an NSNumber 15 digits or less</Abstract>
				</Parameter><Parameter>
					<Name>username</Name>
					<Abstract type="html">registers username for the user object in use (this can be empty if you wish)</Abstract>
				</Parameter><Parameter>
					<Name>onError</Name>
					<Abstract type="html">required, called when an error occurs (See error code for details)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setgoTennaGID:withUsername:onError:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/sendMessage:encrypt:toGID:fromGID:onResponse:onError:</TokenIdentifier>
			<Abstract type="html">*  With this you send a single message to another goTenna user. This is the only means of sending a message where you&apos;ll receive negative or positive confirmation that the receiver received your message. NOTE: must have set goTenna GID before calling this. NOTE: if your receiver needs to know the sender&apos;s GID, you&apos;ll need to send it in the payload</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)sendMessage:(NSData *)messageData encrypt:(BOOL)encryptionEnabled toGID:(NSNumber *)destinationGID fromGID:(NSNumber *)senderGID onResponse:(void ( ^ ) ( GTResponse *))success onError:(void ( ^ ) ( NSError *))onError</Declaration>
			
			
			<Anchor>//api/name/sendMessage:encrypt:toGID:fromGID:onResponse:onError:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/deleteGID:onError:</TokenIdentifier>
			<Abstract type="html">User to delete Group GIDs from your goTenna. AFter calling this, you should receive no further messages for the given GID. NOTE: if you call this with the goTenna&apos;s unique GID, you&apos;ll need to call setgoTennaGID before continueing to use your goTenna. You do NOT need to call this before updating your goTenna&apos;s unique GID</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)deleteGID:(NSNumber *)gidToDelete onError:(void ( ^ ) ( NSError *))onError</Declaration>
			<Parameters>
				<Parameter>
					<Name>gidToDelete</Name>
					<Abstract type="html">the GID that should be removed from</Abstract>
				</Parameter><Parameter>
					<Name>onError</Name>
					<Abstract type="html">required, called when an error occurs (See error code for details)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteGID:onError:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/sendBroadcast:toGID:onResponse:onError:</TokenIdentifier>
			<Abstract type="html">Data sent using this is sent to all goTennas in range. There is no confirmation of receipt of message by any goTennas</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)sendBroadcast:(NSData *)messageData toGID:(NSNumber *)destinationGID onResponse:(void ( ^ ) ( GTResponse *))success onError:(void ( ^ ) ( NSError *))onError</Declaration>
			<Parameters>
				<Parameter>
					<Name>messageData</Name>
					<Abstract type="html">must be 160 characters or less</Abstract>
				</Parameter><Parameter>
					<Name>destinationGID</Name>
					<Abstract type="html">must be NSNumber 111-111-1111 (which can be accessed from the GIDManager method +shoutGID)</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">called when your goTenna responds, responseCode in GTResponse can be used to determine whether receiver received the message</Abstract>
				</Parameter><Parameter>
					<Name>onError</Name>
					<Abstract type="html">required, called when an error occurs (See error code for details)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendBroadcast:toGID:onResponse:onError:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/createGroupWithGIDs:encrypt:onMemberResponse:fromGID:onError:</TokenIdentifier>
			<Abstract type="html">Call this method to create a group. You must have the unique GIDs for all members of the group. When you call this, a one-to-one message is sent to each member of the group notifying them of group creation. NOTE: if the group is large, this method can take a while to process as each message goes out</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (NSNumber *)createGroupWithGIDs:(NSArray *)memberGIDs encrypt:(BOOL)willEncrypt onMemberResponse:(void ( ^ ) ( GTResponse *, NSNumber *memberGID ))onMemberResponse fromGID:(NSNumber *)senderGID onError:(void ( ^ ) ( NSError *, NSNumber *))onError</Declaration>
			<Parameters>
				<Parameter>
					<Name>memberGIDs</Name>
					<Abstract type="html">Cannot include 1111111111, Cannot include any other group GIDs, Can not exceed 10 members</Abstract>
				</Parameter><Parameter>
					<Name>willEncrypt</Name>
					<Abstract type="html">encryption is set here for the given message</Abstract>
				</Parameter><Parameter>
					<Name>onMemberResponse</Name>
					<Abstract type="html">called for each member response to the group create message, responseCode in GTResponse can be used to determine whether receiver received the message (and subsequently knows about the group)</Abstract>
				</Parameter><Parameter>
					<Name>senderGID</Name>
					<Abstract type="html">sender&apos;s gid to be put in here (it can be accessed through UserDataStore to retrieve the current user and then using -gID property on User</Abstract>
				</Parameter><Parameter>
					<Name>onError</Name>
					<Abstract type="html">required, called when an error occurs (See error code for details)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">created groupGID</Abstract></ReturnValue>
			<Anchor>//api/name/createGroupWithGIDs:encrypt:onMemberResponse:fromGID:onError:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/setOnGroupCreated:</TokenIdentifier>
			<Abstract type="html">Set block to perform when receiving a group creation message. As a member of a created group, you need to know when you&apos;ve been added to a group. Here, set the block to be called when you are added to a group. NOTE: you must have called setGotennaGID with your unique GID to receive these messages</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)setOnGroupCreated:(void ( ^ ) ( GTGroupCreationMessageData *))externalOnGroupCreate</Declaration>
			<Parameters>
				<Parameter>
					<Name>externalOnGroupCreate</Name>
					<Abstract type="html">called when you are added to a group, GTGroupCreationMessageData contains information about the group you&apos;ve been added to</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setOnGroupCreated:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/sendGetSystemInfoOnSuccess:onError:</TokenIdentifier>
			<Abstract type="html">Call this to retrieve goTenna system information</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)sendGetSystemInfoOnSuccess:(void ( ^ ) ( SystemInfoResponseData *))onSuccess onError:(void ( ^ ) ( NSError *))onError</Declaration>
			<Parameters>
				<Parameter>
					<Name>onSuccess</Name>
					<Abstract type="html">called when your goTenna responds, responseCode in GTResponse can be used to determine whether receiver received the message, SystemInfoResponseData contains information about the goTenna</Abstract>
				</Parameter><Parameter>
					<Name>onError</Name>
					<Abstract type="html">required, called when an error occurs (See error code for details)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendGetSystemInfoOnSuccess:onError:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/sendSetAppTokenOnResponse:onError:</TokenIdentifier>
			<Abstract type="html">Send off app token that was set earlier</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)sendSetAppTokenOnResponse:(void ( ^ ) ( GTResponse *))onResponse onError:(void ( ^ ) ( NSError *))error</Declaration>
			<Parameters>
				<Parameter>
					<Name>onResponse</Name>
					<Abstract type="html">called when your goTenna responds, responseCode in GTResponse can be used to determine whether receiver received the message</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">required, called when an error occurs (See error code for details)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendSetAppTokenOnResponse:onError:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/sendDisconnectGotenna</TokenIdentifier>
			<Abstract type="html">Call to send a disconnect message to the goTenna</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)sendDisconnectGotenna</Declaration>
			
			
			<Anchor>//api/name/sendDisconnectGotenna</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/resetGotenna</TokenIdentifier>
			<Abstract type="html">Resets the goTenna. NOTE: this tends to happen automatically at periods of time</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)resetGotenna</Declaration>
			
			
			<Anchor>//api/name/resetGotenna</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/setPublicKey:</TokenIdentifier>
			<Abstract type="html">Sets the public key on the goTenna. NOTE: this happens behind the scenes automatically</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)setPublicKey:(NSData *)publicKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>publicKey</Name>
					<Abstract type="html">public key data passed in</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setPublicKey:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/queueCommand:</TokenIdentifier>
			<Abstract type="html">Queues up a command</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)queueCommand:(GTCommand *)command</Declaration>
			<Parameters>
				<Parameter>
					<Name>command</Name>
					<Abstract type="html">GTCommand gets queued up</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/queueCommand:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/resetQueue</TokenIdentifier>
			<Abstract type="html">Resets the internal queue</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)resetQueue</Declaration>
			
			
			<Anchor>//api/name/resetQueue</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/dispatchResponse:</TokenIdentifier>
			<Abstract type="html">Handles incoming bluetooth transferred data. NOTE: this happens behind the scenes automatically</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)dispatchResponse:(NSMutableData *)response</Declaration>
			<Parameters>
				<Parameter>
					<Name>response</Name>
					<Abstract type="html">data to be handled</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/dispatchResponse:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/sendGetMessageRequest</TokenIdentifier>
			<Abstract type="html">Pulls in any messages that are on the goTenna. NOTE: called automatically at important intervals</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)sendGetMessageRequest</Declaration>
			
			
			<Anchor>//api/name/sendGetMessageRequest</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/abortCurrentCommand</TokenIdentifier>
			<Abstract type="html">Removes the current command (to be executed), command retrieved from the CommandQueue</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)abortCurrentCommand</Declaration>
			
			
			<Anchor>//api/name/abortCurrentCommand</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/sendStoreDateTime</TokenIdentifier>
			<Abstract type="html">Sends date and time to the goTenna. NOTE: handled automatically</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)sendStoreDateTime</Declaration>
			
			
			<Anchor>//api/name/sendStoreDateTime</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/pauseQueue</TokenIdentifier>
			<Abstract type="html">Stops activity involving the sending of command objects/data in the queue</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)pauseQueue</Declaration>
			
			
			<Anchor>//api/name/pauseQueue</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/queuePriorityCommands:</TokenIdentifier>
			<Abstract type="html">Queues an array of priority commands</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)queuePriorityCommands:(GTCommandArray *)array</Declaration>
			<Parameters>
				<Parameter>
					<Name>array</Name>
					<Abstract type="html">array of commands that will be set to the front of the queue</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/queuePriorityCommands:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/executeUpcomingQueueCommand</TokenIdentifier>
			<Abstract type="html">Executes the next command in the queue. NOTE: handled automatically, no immediate requirement to call this method</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)executeUpcomingQueueCommand</Declaration>
			
			
			<Anchor>//api/name/executeUpcomingQueueCommand</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/sendHardReset</TokenIdentifier>
			<Abstract type="html">Sends a reset command to the goTenna</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)sendHardReset</Declaration>
			
			
			<Anchor>//api/name/sendHardReset</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/sendPublicKeyRequestToGID:</TokenIdentifier>
			<Abstract type="html">Sends off a public key request, to be responded with a public key</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)sendPublicKeyRequestToGID:(NSNumber *)destinationGID</Declaration>
			<Parameters>
				<Parameter>
					<Name>destinationGID</Name>
					<Abstract type="html">requesting public key from this GID</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendPublicKeyRequestToGID:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/sendPublicKeyResponseToGID:</TokenIdentifier>
			<Abstract type="html">Sends off a public key, often as a response to a public key request</Abstract>
			<DeclaredIn>GTCommandCenter.h</DeclaredIn>
			
			<Declaration>- (void)sendPublicKeyResponseToGID:(NSNumber *)destinationGID</Declaration>
			<Parameters>
				<Parameter>
					<Name>destinationGID</Name>
					<Abstract type="html">sending public key to this GID</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendPublicKeyResponseToGID:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/currentQueueCommand</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>- (GTCommand *)currentQueueCommand</Declaration>
			
			
			<Anchor>//api/name/currentQueueCommand</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/remainingCommands</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>- (NSArray *)remainingCommands</Declaration>
			
			
			<Anchor>//api/name/remainingCommands</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/valueChangeForBERState:messageData:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>- (void)valueChangeForBERState:(BOOL)BERState messageData:(NSData *)messageData</Declaration>
			
			
			<Anchor>//api/name/valueChangeForBERState:messageData:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/buildGetMessageRequest</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>- (GTCommand *)buildGetMessageRequest</Declaration>
			
			
			<Anchor>//api/name/buildGetMessageRequest</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/setGTGID:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>- (void)setGTGID:(GTGid *)gtGID</Declaration>
			
			
			<Anchor>//api/name/setGTGID:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/sendDeleteLastMessageRequest</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>- (void)sendDeleteLastMessageRequest</Declaration>
			
			
			<Anchor>//api/name/sendDeleteLastMessageRequest</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/queuePriorityGTCommand:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>- (void)queuePriorityGTCommand:(GTCommand *)command</Declaration>
			
			
			<Anchor>//api/name/queuePriorityGTCommand:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/addGroupGID:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>- (void)addGroupGID:(NSNumber *)groupGID</Declaration>
			
			
			<Anchor>//api/name/addGroupGID:</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/setCommandQueue:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) GTCommandQueue *commandQueue</Declaration>
			
			
			<Anchor>//api/name/commandQueue</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/commandQueue</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) GTCommandQueue *commandQueue</Declaration>
			
			
			<Anchor>//api/name/commandQueue</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GTCommandCenter/commandQueue</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) GTCommandQueue *commandQueue</Declaration>
			
			
			<Anchor>//api/name/commandQueue</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/setResponseProcessor:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) GTResponseDispatcher *responseProcessor</Declaration>
			
			
			<Anchor>//api/name/responseProcessor</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/responseProcessor</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) GTResponseDispatcher *responseProcessor</Declaration>
			
			
			<Anchor>//api/name/responseProcessor</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GTCommandCenter/responseProcessor</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) GTResponseDispatcher *responseProcessor</Declaration>
			
			
			<Anchor>//api/name/responseProcessor</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/setCommandBuilder:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) GTCommandBuilder *commandBuilder</Declaration>
			
			
			<Anchor>//api/name/commandBuilder</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/commandBuilder</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) GTCommandBuilder *commandBuilder</Declaration>
			
			
			<Anchor>//api/name/commandBuilder</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GTCommandCenter/commandBuilder</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) GTCommandBuilder *commandBuilder</Declaration>
			
			
			<Anchor>//api/name/commandBuilder</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/setOnIncomingGroupCreated:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( GTGroupCreationMessageData *) onIncomingGroupCreated</Declaration>
			
			
			<Anchor>//api/name/onIncomingGroupCreated</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/onIncomingGroupCreated</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( GTGroupCreationMessageData *) onIncomingGroupCreated</Declaration>
			
			
			<Anchor>//api/name/onIncomingGroupCreated</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GTCommandCenter/onIncomingGroupCreated</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( GTGroupCreationMessageData *) onIncomingGroupCreated</Declaration>
			
			
			<Anchor>//api/name/onIncomingGroupCreated</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/setUserDataStore:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UserDataStore *userDataStore</Declaration>
			
			
			<Anchor>//api/name/userDataStore</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/userDataStore</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UserDataStore *userDataStore</Declaration>
			
			
			<Anchor>//api/name/userDataStore</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GTCommandCenter/userDataStore</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UserDataStore *userDataStore</Declaration>
			
			
			<Anchor>//api/name/userDataStore</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/setCommandValidator:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) GTCommandValidator *commandValidator</Declaration>
			
			
			<Anchor>//api/name/commandValidator</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/commandValidator</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) GTCommandValidator *commandValidator</Declaration>
			
			
			<Anchor>//api/name/commandValidator</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GTCommandCenter/commandValidator</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) GTCommandValidator *commandValidator</Declaration>
			
			
			<Anchor>//api/name/commandValidator</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/setTestBERMessageData:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSData *testBERMessageData</Declaration>
			
			
			<Anchor>//api/name/testBERMessageData</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/testBERMessageData</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSData *testBERMessageData</Declaration>
			
			
			<Anchor>//api/name/testBERMessageData</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GTCommandCenter/testBERMessageData</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSData *testBERMessageData</Declaration>
			
			
			<Anchor>//api/name/testBERMessageData</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/setActiveStateForBER:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL activeStateForBER</Declaration>
			
			
			<Anchor>//api/name/activeStateForBER</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GTCommandCenter/activeStateForBER</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL activeStateForBER</Declaration>
			
			
			<Anchor>//api/name/activeStateForBER</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GTCommandCenter/activeStateForBER</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>GTCommandCenter.m</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL activeStateForBER</Declaration>
			
			
			<Anchor>//api/name/activeStateForBER</Anchor>
            <NodeRef refid="23"/>
		</Token>
		
        
	</File>
</Tokens>